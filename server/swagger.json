{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger API Docs for Kids Story Illustrator",
    "description": "This is a sample Story illustrator Server based on the OpenAPI 3.0 specification." ,
    "version": "1.0.11"
  },
  "servers": [
    {
      "url": "http://localhost/3000/"
    }
  ],
  "schemes": ["http", "https"],
  "tags": [
    {
      "name": "Story",
      "description": "Everything about your Stories"
    },
    {
      "name": "User",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "get-story": {
      "get": {
        "tags": ["Story"],
        "summary": "Find All Stories in database",
        "description": "Find All Stories in database.",
        "operationId": "getAllStories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              }
            }
          }
        }
      }
    },
    "get-by-email/{email}": {
      "get": {
        "tags": ["Story"],
        "summary": "Find Story by Email",
        "description": "Find Story by Email.",
        "operationId": "getStoryByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email of User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              }
            }
          }
        }
      }
    },
    "get-story/{id}": {
      "get": {
        "tags": ["Story"],
        "summary": "Find Story by Id",
        "description": "Find Story by Id.",
        "operationId": "getStoryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Story",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              }
            }
          }
        }
      }
    },
    "/update-story/{id}": {
      "put": {
        "tags": ["Story"],
        "summary": "Update an existing story",
        "description": "Update an existing story by Id",
        "operationId": "updateStory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Story id to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent story in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Story"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Story"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Story"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Story not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/create-story": {
      "post": {
        "tags": ["Story"],
        "summary": "Add a new story to the database",
        "description": "Add a new story to the database",
        "operationId": "addStory",
        "requestBody": {
          "description": "Create a new story in the databse",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Story"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Story"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Story"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/delete-story/{id}": {
      "delete": {
        "tags": ["Story"],
        "summary": "Deletes a story",
        "description": "delete a story",
        "operationId": "deleteStory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Story id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid Story value"
          }
        }
      }
    },
    "get-user": {
      "get": {
        "tags": ["User"],
        "summary": "Find User by token",
        "description": "Find User by token.",
        "operationId": "getUserByToken",
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/create-user": {
      "post": {
        "tags": ["User"],
        "summary": "Create user",
        "description": "Register a new user to the system.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/update-user/": {
      "put": {
        "tags": ["User"],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [],
        "requestBody": {
          "description": "Update an existent user in the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/delete-user": {
      "delete": {
        "tags": ["User"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Story": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "theuser@gmail.com"
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "password": {
            "type": "string",
            "example": "John"
          }
        },
        "xml": {
          "name": "user"
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
